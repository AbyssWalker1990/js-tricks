Map is a collection of keyed data items, just like an Object. 
!!! But the main difference is that Map allows keys of any type. !!!

map[key] isn’t the right way to use a Map
    Although map[key] also works, e.g. we can set map[key] = 2, this is treating map as a plain JavaScript object, 
    so it implies all corresponding limitations (only string/symbol keys and so on).
    So we should use map methods: set, get and so on

Using OBJECTS as keys is one of the most notable and important Map features

How Map compares keys:
    To test keys for equivalence, Map uses the algorithm SameValueZero. It is roughly the same as strict equality ===, 
    but the difference is that NaN is considered equal to NaN. So NaN can be used as the key as well.

Every map.set call returns the map itself, so we can “chain” the calls:
    map.set('1', 'str1')
    .set(1, 'num1')
    .set(true, 'bool1');

The insertion order is used
    The iteration goes in the same order as the values were inserted. Map preserves this order, 
    unlike a regular Object.

------------------------------------------

WeakMap
    The first difference between Map and WeakMap is that keys must be objects,
    not primitive values:

    let weakMap = new WeakMap();
    let obj = {};

    weakMap.set(obj, "ok"); // works fine (object key)

    // can't use a string as the key
    weakMap.set("test", "Whoops"); // Error, because "test" is not an object

WeakMap does not support iteration and methods keys(), values(), entries(), 
so there’s no way to get all keys or values from it.

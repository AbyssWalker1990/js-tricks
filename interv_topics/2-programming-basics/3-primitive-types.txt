Primitive Data Types:
    is data that is not an object and has no methods or properties. There are 7 primitive data types:
    string, number, bigint, boolean, undefined, symbol, null

String 
    Template literals --- string interpolation
    Wrapper object for using methods. After the use, the wrapper object is disposed
    Difference between slice() and substring():
        These two methods are almost identical, except for a few differences. One of them is that if the first index passed to substring() is greater than the second index, the two arguments are exchanged so that a string is still returned. In the same scenario, the slice() method returns an empty string instead:
    split() have optional second argument for maximum pieces

    Iterator:
    const str = 'The quick red fox jumped over the lazy dog\'s back.';

    const iterator = str[Symbol.iterator]();
    let theChar = iterator.next();

    while (!theChar.done) {
    console.log(theChar.value);
    theChar = iterator.next();
    // Expected output: "T"
    //                  "h"
    //                  "e"
    //                   ...
    }

    String() works with null and undefined, but toString() will raise error
-------------------------------------------------------------
Number:
    Regular numbers - 64-bit format IEEE-754, also known as “double precision floating point numbers”
    BigInt numbers - represent integers of arbitrary length. They are sometimes needed because a regular integer number can’t safely exceed (253-1) or be less than -(253-1)

    Syntactic sugar:
    let billion = 1_000_000_000;

    let billion = 1e9;  // 1 billion, literally: 1 and 9 zeroes

    alert( 7.3e9 );  // 7.3 billions (same as 7300000000 or 7_300_000_000)

    1e3 === 1 * 1000; // e3 means *1000
    1.23e6 === 1.23 * 1000000; // e6 means *1000000

    let mcs = 1e-6; // five zeroes to the left from 1

    // -3 divides by 1 with 3 zeroes
    1e-3 === 1 / 1000; // 0.001

    // -6 divides by 1 with 6 zeroes
    1.23e-6 === 1.23 / 1000000; // 0.00000123

    // an example with a bigger number
    1234e-2 === 1234 / 100; // 12.34, decimal point moves 2 times

    Hex, binary and octal:

    alert( 0xff ); // 255
    alert( 0xFF ); // 255 (the same, case doesn't matter)

    let a = 0b11111111; // binary form of 255
    let b = 0o377; // octal form of 255

    alert( a == b ); // true, the same number 255 at both side
-----------------------------------------
    toString(base)
    alert( 123456..toString(36) ); // 2n9c

    Dont forget of MAth methods to round (and toFixed(), that returns string)
------------------------------------------
    Imprecise calculations:
    Internally, a number is represented in 64-bit format IEEE-754, so there are exactly 64 bits to store a number: 52 of them are used to store the digits, 11 of them store the position of the decimal point, and 1 bit is for the sign.

    If a number is really huge, it may overflow the 64-bit storage and become a special numeric value Infinity:

    // Hello! I'm a self-increasing number!
    alert( 9999999999999999 ); // shows 1000000000000000

    isNaN TRICK:
    alert( NaN === NaN ); // false

    isFinite TRICK:
    Please note that an empty or a space-only string is treated as 0 in all numeric functions including isFinite

    METHODS ARE NOT THE SAME!!!
    Number.isNaN and Number.isFinite methods are the more “strict” versions of isNaN and isFinite functions. They do not autoconvert their argument into a number, but check if it belongs to the number type instead.
    alert( Number.isNaN(NaN) ); // true
    alert( Number.isNaN("str" / 2) ); // true

    // Note the difference:
    alert( Number.isNaN("str") ); // false, because "str" belongs to the string type, not the number type
    alert( isNaN("str") ); // true, because isNaN converts string "str" into a number and gets NaN as a result of this conversion

    alert( Number.isFinite(123) ); // true
    alert( Number.isFinite(Infinity) ); // false
    alert( Number.isFinite(2 / 0) ); // false

    // Note the difference:
    alert( Number.isFinite("123") ); // false, because "123" belongs to the string type, not the number type
    alert( isFinite("123") ); // true, because isFinite converts string "123" into a number 123

    Comparison with Object.is
    It works with NaN: Object.is(NaN, NaN) === true, that’s a good thing.
    Values 0 and -0 are different: Object.is(0, -0) === false, technically that’s correct, because internally the number has a sign bit that may be different even if all other bits are zeroes.
    -----------------------------------------------

    parseInt() and parseFloat():
    alert( parseInt('100px') ); // 100
    alert( parseFloat('12.5em') ); // 12.5

    alert( parseInt('12.3') ); // 12, only the integer part is returned
    alert( parseFloat('12.3.4') ); // 12.3, the second point stops the reading

    alert( parseInt('a123') ); // NaN, the first symbol stops the process

    alert( parseInt('0xff', 16) ); // 255
    alert( parseInt('ff', 16) ); // 255, without 0x also works

    alert( parseInt('2n9c', 36) ); // 123456
    ----------------------------

BigInt:
    const bigint = 1234567890123456789012345678901234567890n;

    const sameBigint = BigInt("1234567890123456789012345678901234567890");

    const bigintFromNumber = BigInt(10); // same as 10n

    Please note: the division 5/2 returns the result rounded towards zero, without the decimal part. All operations on bigints return bigints.

    Cant mix with numbers
-----------------------------------------------------
undefined:
    The meaning of undefined is “value is not assigned”
    Normally, one uses null to assign an “empty” or “unknown” value to a variable, while undefined is reserved as a default initial value for unassigned things.
-----------------------------------------------------
null:
In JavaScript, null is not a “reference to a non-existing object” or a “null pointer” like in some other languages.
It’s just a special value which represents “nothing”, “empty” or “value unknown”.
-----------------------------------------------------
Symbol:
    A “symbol” represents a unique identifier.
    let id1 = Symbol("id");
    let id2 = Symbol("id");

    alert(id1 == id2); // false 

    Symbols don’t auto-convert to a string
    let id = Symbol("id");
    alert(id); // TypeError: Cannot convert a Symbol value to a string

    let id = Symbol("id");
    alert(id.toString()); // Symbol(id), now it works
    alert(id.description); // id

    HIDDEN PROPERTIES:
    let user = { // belongs to another code
        name: "John"
    };

    let id = Symbol("id");

    user[id] = 1;

    alert( user[id] ); // we can access the data using the symbol as the key
--------------------------------------
    Symbols in an object literal: needs []
    let id = Symbol("id");

    let user = {
        name: "John",
        [id]: 123 // not "id": 123
    };
---------------------------------------
    !!!!!! Symbols are skipped by for…in !!!!!!!
    Object.keys(user) also ignores them
    In contrast, Object.assign copies both string and symbol properties:

    let id = Symbol("id");
    let user = {
        [id]: 123
    };

    let clone = Object.assign({}, user);

    alert( clone[id] ); // 123
-----------------------------------------
Global Symbols:
    // read from the global registry
    let id = Symbol.for("id"); // if the symbol did not exist, it is created

    // read it again (maybe from another part of the code)
    let idAgain = Symbol.for("id");

    // the same symbol
    alert( id === idAgain ); // true
---------------------------------------
Symbol.keyFor()
    // get symbol by name
    let sym = Symbol.for("name");
    let sym2 = Symbol.for("id");

    // get name by symbol
    alert( Symbol.keyFor(sym) ); // name
    alert( Symbol.keyFor(sym2) ); // id

    it doesn’t work for non-global symbols. If the symbol is not global, it won’t be able to find it and returns undefined.

    let globalSymbol = Symbol.for("name");
    let localSymbol = Symbol("name");

    alert( Symbol.keyFor(globalSymbol) ); // name, global symbol
    alert( Symbol.keyFor(localSymbol) ); // undefined, not global

    alert( localSymbol.description ); // name
---------------------------------------
System Symbols:
    Symbol.hasInstance
    Symbol.isConcatSpreadable
    Symbol.iterator
    Symbol.toPrimitive
    …and so on.

TIPS:
    Technically, symbols are not 100% hidden. There is a built-in method Object.getOwnPropertySymbols(obj) that allows us to get all symbols. Also there is a method named Reflect.ownKeys(obj) that returns all keys of an object including symbolic ones. But most libraries, built-in functions and syntax constructs don’t use these methods

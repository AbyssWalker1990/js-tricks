Call Stack - tracker of execution of program
1. Node wrapping all our code in anonymous functionn that refers to main
2. Main function pushes to bottom of Call Stack
3. If we have another func in script (for example console.log) - it pushes to Call Stack above main func
and deletes from stack when it executed
4. If we have func, that calls another func - functions will be pushing above to top and top function will be
executed first
--------------------------------
With async functions (example setTimeout())
1. Also wrapping all script in main func
2. Called async func go to Node APIs, not to call stack
3. While this async func trying to get result, another js code can be executed
4. When async event done - it moves to Callback Queue
5. After this Event Loop looks at Call Stack and Callback Queue
6. Functions from Call Stack WILL BE EXECUTED FIRST!
---------------------------------
There are difference between browser and node js:
1. setImmediate() - method of node js
2. Node js have loop with phases:
  - Timers: executes callbacks schediled by setTimeout and setInterval
  - pending callbacks: executes I/O callbacks deferred to next loop iteration
  - idle, prepeare: only used internally
  - poll: retrieve new I/O events, executes almost all related callbacks(exception of
  close callbacks, the ones scheduled by timers, and setImmediate)
  - check: setImmediate() callbacks are invoked here
  - close callbacks: some close callbacks
3. Node js has more than 1 callback queue, instead - many queues for all phases
4. process.nextTick have a bigger priority than setImmediate
5. Promise have lesser priority then process.nextTick
   BUT if process.nextTick is the resolve part of Promise - it wil be executed after all next Promises
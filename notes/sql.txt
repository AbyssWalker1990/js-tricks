TABLES operations:

CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(20),
    major VARCHAR(20)
);

OR

CREATE TABLE student (
    student_id INT,
    name VARCHAR(20),
    major VARCHAR(20),
    PRIMARY KEY(student_id)
);

DESCRIBE student;  // gives description

DROP TABLE student;  // delete TABLE

ALTER TABLE student ADD gpa DECIMAL(3, 2);  // add column gpa

ALTER TABLE student DROP COLUMN gpa;    // delete column gpa
-----------------------------------------------------------------------------

INSERT operations:

INSERT INTO student VALUES(1, 'Jack', 'Biology');
INSERT INTO student VALUES(2, 'Kate', 'Sociology');

RESULT:
student_id	name	major
1	        Jack	Biology
2	        Kate	Sociology

-----------------------------------------------------------------------------
PART INSERT:

INSERT INTO student(student_id, name) VALUES(3, 'Vova');

RESULT: 
student_id	name	major
1	        Jack	Biology
2	        Kate	Sociology
3           Vova    null

-----------------------------------------------------------------------------

CONSTRAINTS:

CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(20) NOT NULL,  // Cant store NULL now
    major VARCHAR(20) UNIQUE  // cant have duplicate
);

CREATE TABLE student (
    student_id INT PRIMARY KEY AUTO_INCREMENT,  // now id incrementing auto
    name VARCHAR(20), 
    major VARCHAR(20) DEFAULT 'undecided'  //  HAVE DEFAULT VALUE NOW 
);

Example INSERT with AUTO_INCREMENT:

INSERT INTO student(name, major) VALUES('Jack', 'Biology');         // id will be 1
INSERT INTO student(name, major) VALUES('Kate', 'Sociology');       // id will be 2

-----------------------------------------------------------------------------

UPDATE and DELETE

UPDATE student
SET major = 'Bio'
WHERE major = 'Biology'; // updates all Biology to Bio

UPDATE student
SET major = 'Comp Sci'
WHERE student_id = 4;   // updates major to Comp Sci where id is 4

UPDATE student
SET major = 'Biochemistry'
WHERE major = 'Bio' OR major = 'Chemistry';

UPDATE student
SET name = 'Tom', major = 'undecided'
WHERE student_id = 1;

UPDATE student
SET name = 'Tom', major = 'undecided';  // going to apply for ALL ROWS!!!

DELETE FROM student;    // Delete ALL

DELETE FROM student
WHERE student_id = 5;

DELETE FROM student
WHERE name = 'Tom' AND major = 'undecided';
------------------------------------------------------------------------

BASIC QUERIES:

SELECT name FROM student;
SELECT name, major FROM student;
SELECT student.name, student.major FROM student;

SELECT student.name, student.major 
FROM student
ORDER BY name DESC;  // Ordered by descending

SELECT student.name, student.major 
FROM student
ORDER BY major, student_id;  // ordered by major first and then by id

SELECT student.name, student.major 
FROM student
LIMIT 2;    // shows only 2 rows

SELECT *
FROM student
WHERE major = 'Biology' OR name = 'Kate';

SELECT *
FROM student
WHERE major <> 'Biology';   // NOT EQUAL

SELECT *
FROM student
WHERE name IN ('Claire', 'Kate', 'Mike');  // Shows all when we have corresponding names

-------------------------------------------------------------
FOREIGHN KEY:
CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),  // COMPOSITE PRIMARY KEY
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

------------------------------------------------------------------
MORE BASIC QUERIES

SELECT first_name AS forename, last_name  // shows first_name as forename
FROM employee;

SELECT DISTINCT sex   // shows only unique 
FROM employee;

-------------------------------------------------------------------
FUNCTIONS:

SELECT COUNT(emp_id)  // counts how many employees in the table
FROM employee;

SELECT COUNT(emp_id)
FROM employee
WHERE sex = 'F' AND birth_day > '1970-01-01';  // counts only females that was born after 1970-01-01



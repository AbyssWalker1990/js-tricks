TABLES operations:

CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(20),
    major VARCHAR(20)
);

OR

CREATE TABLE student (
    student_id INT,
    name VARCHAR(20),
    major VARCHAR(20),
    PRIMARY KEY(student_id)
);

DESCRIBE student;  // gives description

DROP TABLE student;  // delete TABLE

ALTER TABLE student ADD gpa DECIMAL(3, 2);  // add column gpa

ALTER TABLE student DROP COLUMN gpa;    // delete column gpa
-----------------------------------------------------------------------------

INSERT operations:

INSERT INTO student VALUES(1, 'Jack', 'Biology');
INSERT INTO student VALUES(2, 'Kate', 'Sociology');

RESULT:
student_id	name	major
1	        Jack	Biology
2	        Kate	Sociology

-----------------------------------------------------------------------------
PART INSERT:

INSERT INTO student(student_id, name) VALUES(3, 'Vova');

RESULT: 
student_id	name	major
1	        Jack	Biology
2	        Kate	Sociology
3           Vova    null

-----------------------------------------------------------------------------

CONSTRAINTS:

CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(20) NOT NULL,  // Cant store NULL now
    major VARCHAR(20) UNIQUE  // cant have duplicate
);

CREATE TABLE student (
    student_id INT PRIMARY KEY AUTO_INCREMENT,  // now id incrementing auto
    name VARCHAR(20), 
    major VARCHAR(20) DEFAULT 'undecided'  //  HAVE DEFAULT VALUE NOW 
);

Example INSERT with AUTO_INCREMENT:

INSERT INTO student(name, major) VALUES('Jack', 'Biology');         // id will be 1
INSERT INTO student(name, major) VALUES('Kate', 'Sociology');       // id will be 2

-----------------------------------------------------------------------------

UPDATE and DELETE

UPDATE student
SET major = 'Bio'
WHERE major = 'Biology'; // updates all Biology to Bio

UPDATE student
SET major = 'Comp Sci'
WHERE student_id = 4;   // updates major to Comp Sci where id is 4

UPDATE student
SET major = 'Biochemistry'
WHERE major = 'Bio' OR major = 'Chemistry';

UPDATE student
SET name = 'Tom', major = 'undecided'
WHERE student_id = 1;

UPDATE student
SET name = 'Tom', major = 'undecided';  // going to apply for ALL ROWS!!!

DELETE FROM student;    // Delete ALL

DELETE FROM student
WHERE student_id = 5;

DELETE FROM student
WHERE name = 'Tom' AND major = 'undecided';
------------------------------------------------------------------------

BASIC QUERIES:

SELECT name FROM student;
SELECT name, major FROM student;
SELECT student.name, student.major FROM student;

SELECT student.name, student.major 
FROM student
ORDER BY name DESC;  // Ordered by descending

SELECT student.name, student.major 
FROM student
ORDER BY major, student_id;  // ordered by major first and then by id

SELECT student.name, student.major 
FROM student
LIMIT 2;    // shows only 2 rows

SELECT *
FROM student
WHERE major = 'Biology' OR name = 'Kate';

SELECT *
FROM student
WHERE major <> 'Biology';   // NOT EQUAL

SELECT *
FROM student
WHERE name IN ('Claire', 'Kate', 'Mike');  // Shows all when we have corresponding names

-------------------------------------------------------------
FOREIGHN KEY:
CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),  // COMPOSITE PRIMARY KEY
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

------------------------------------------------------------------
MORE BASIC QUERIES

SELECT first_name AS forename, last_name  // shows first_name as forename
FROM employee;

SELECT DISTINCT sex   // shows only unique 
FROM employee;

-------------------------------------------------------------------
FUNCTIONS:

SELECT COUNT(emp_id)  // counts how many employees in the table
FROM employee;

SELECT COUNT(emp_id)
FROM employee
WHERE sex = 'F' AND birth_day > '1970-01-01';  // counts only females that was born after 1970-01-01

SELECT AVG(salary)
FROM employee
WHERE sex = 'M';  // shows average salary ofmale employee

SELECT SUM(salary)
FROM employee;  // shows sum

SELECT COUNT(sex), sex
FROM employee
GROUP BY sex; // shows how many employees of M and F exists

SELECT SUM(total_sales), emp_id
FROM works_with
GROUP BY emp_id;  // gives total employee sales

SELECT SUM(total_sales), client_id
FROM works_with
GROUP BY client_id; // shows how many each client spend

SELECT *
FROM client
WHERE client_name LIKE '%LLC'; // shows client wit LLC in name

SELECT *
FROM branch_supplier
WHERE supplier_name LIKE '% Label%'; // shows all supplyiers of labels

SELECT *
FROM employee
WHERE birth_day LIKE '____-02-%'; shows all employee with birthday in february

-----------------------------------------------------------
UNION:

SELECT first_name
FROM employee
UNION
SELECT branch_name
FROM branch; // Shows employee names and branches in SINGLE COLUMN


SELECT client_name, branch_id
FROM client
UNION
SELECT supplier_name, branch_id
FROM branch_supplier; // Shows all client and suppliers with branch id

------------------------------------------------------------
JOIN:

1. EXAMPLE of INNER JOIN - we have column that shared by 2 tables

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id = branch.mgr_id; // Combine 2 tables using similar emp_id and mgr_id
// It shows to us only managers of branches!

2. EXAMPLE of LEFT JOIN

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
LEFT JOIN branch
ON employee.emp_id = branch.mgr_id;
// It shows ALL employees but branch column will have NULL with emplyyees that are not managers

3. EXAMPLE of RIGHT JOIN

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id = branch.mgr_id;
// It shows all branches name, but will set managers to NULL if it havent one

---------------------------------------------------------------

NESTED QUERIES:

SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (
    SELECT works_with.emp_id
    FROM works_with
    WHERE works_with.total_sales > 30000
);  // Shows employees names who sold goods more than 30000 to single client

SELECT client.client_name
FROM client
WHERE client.branch_id IN (
    SELECT branch.branch_id
    FROM branch
    WHERE branch.mgr_id IN (
        SELECT employee.emp_id
        from employee
        WHERE employee.first_name = 'Michael' && employee.last_name = 'Scott'
    )
); // Shows all client that related to Michael Scott branch

----------------------------------------------------------

ON DELETE CASCADE   // delete entire row
ON DELETE SET NULL  // Set to null, but doesnt work if it is primary KEY

----------------------------------------------------------

TRIGGERS:

For defining a trigger we must to change delimiter from ; to another because of need to not stop execution
on a description action that will be performed when trigger activated
Also we need to use CLI, because popsql can not chabge the delimiter

DELIMITER $$  // change delimiter

CREATE
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES('added new employee');  // insert value in trigger_test before inserting new employee
    END $$

DELIMITER ;

CREATE
    TRIGGER my_trigger1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES(NEW.first_name); // new refers to inserted row
    END $$

CREATE
    TRIGGER my_trigger2 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        IF NEW.sex = 'M' THEN
            INSERT INTO trigger_test VALUES('added male employee');
        ELSEIF NEW.sex = 'F' THEN
            INSERT INTO trigger_test VALUES('added female employee');
        ELSE
            INSERT INTO trigger_test VALUES('added other employee');
        END IF;
    END $$  // using if statements

DROP TRIGGER my_trigger;  // delete trigger

-----------------------------------------------------

ER(Entity Relationship) Diagrams

Entity(square) - an object we want to model and store info about
Attributes(ovals) - specific piece of info about an Entity
Primary Key(ovals with underline) - an attribute(s) that uniquely isentify an entry in the db table
Composite Attribute - an attribute that can be broken up into sub-attributes
Multi-value Attribute(oval with extra circle) - can have more than 1 value
Derived Attribute (oval dash lines) - can be derived from another attributes

Multiple Entities - we can define more than 1 entity in diagram
Relationships(romb) - defines a Relationship between 2 Entities
Total participation (double lines) - all members must participate in Relationships
Partial participation (single line)
Relationship Attribute - attr about Relationship

Relationship Cardinality - the number of instances of an entity from a Relation
that can be associated with the Relation
Example:
Student(Entity)-----1-----Takes(Relationsip)-----1-----Class(Entity)
1 student can take 1 Class

Student(Entity)-----1-----Takes(Relationsip)-----N-----Class(Entity)
Studen can take 1 class, class could be taken by many students

Student(Entity)-----N-----Takes(Relationsip)-----M-----Class(Entity)
student can take any number of classes and reverse

Weak Entity(double line squre) - An entity that can not be uniquely identified by its attr alone
Identifying Relationship(double line romb) - serves to uniquely identify the weak entity

